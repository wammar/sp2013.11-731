#!/usr/bin/env python
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
 
# DRY
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)
    # or sum(w in ref for w in f) # cast bool -> int
    # or sum(map(ref.__contains__, h)) # ugly!
 
def score(prec, recall, recall_weight):
#  return prec
  assert(recall_weight >= 0 and recall_weight <= 1)
  prec_weight = 1 - recall_weight
  if prec+recall == 0:
    return 0
  else:
    score = prec * recall / (prec_weight * prec + recall_weight * recall)
#    score = prec_weight * prec + recall_weight * recall
    return score

def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    # PEP8: use ' and not " for strings
    parser.add_argument('-i', '--input', default='data/train.hyp1-hyp2-ref',
            help='input file (default data/train.hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        (h1Set, h2Set, refSet) = ( set(h1), set(h2), set(ref) )
        h1_precision = 1.0 * word_matches(h1, refSet) / len(h1)
        h1_recall = 1.0 * word_matches(ref, h1Set) / len(ref)
        h2_precision = 1.0 * word_matches(h2, refSet) / len(h2)
        h2_recall = 1.0 * word_matches(ref, h2Set) / len(ref)
        recall_weight = 0.7
        h1_score = score(h1_precision, h1_recall, recall_weight)
        h2_score = score(h2_precision, h2_recall, recall_weight)
        if h1_score < h2_score:
            print 1
        elif h1_score > h2_score:
            print -1
        else:
            print 0
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
